[{"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\index.js":"1","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\App.js":"2","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\reportWebVitals.js":"3","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\OldYoutubeForm.js":"4","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\YoutubeForm.js":"5","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\TextError.js":"6"},{"size":517,"mtime":1607717210397,"results":"7","hashOfConfig":"8"},{"size":261,"mtime":1607730164715,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1607717210400,"results":"10","hashOfConfig":"8"},{"size":2718,"mtime":1607730229317,"results":"11","hashOfConfig":"8"},{"size":7090,"mtime":1607799936363,"results":"12","hashOfConfig":"8"},{"size":191,"mtime":1607717210396,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1q9vgcy",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\index.js",[],["31","32"],"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\App.js",["33"],"\r\nimport './App.css';\r\nimport OldYoutubeForm from './components/OldYoutubeForm';\r\nimport YoutubeForm from './components/YoutubeForm';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <YoutubeForm />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\reportWebVitals.js",[],"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\OldYoutubeForm.js",["34"],"import React from 'react'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\n\r\nconst initialValues = {\r\n    name: '',\r\n    email: '',\r\n    channel: ''\r\n}\r\n\r\nconst onSubmit = values => {\r\n    console.log('Form data', values)\r\n}\r\n\r\nconst validationSchema = Yup.object({\r\n    name: Yup.string().required('Required!'),\r\n    email: Yup.string()\r\n        .email('Invalid email format')\r\n        .required('Required!'),\r\n    channel: Yup.string().required('Required!')\r\n})\r\nconst validate = values => {\r\n    // let errors = {}\r\n    // if (!values.name) {\r\n    //     errors.name = 'Required'\r\n    // }\r\n    // if (!values.email) {\r\n    //     errors.email = 'Required'\r\n    // } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    //     errors.email = 'Invalid email format'\r\n    // }\r\n\r\n    // if (!values.channel) {\r\n    //     errors.channel = 'Required'\r\n    // }\r\n\r\n\r\n    // return errors\r\n\r\n}\r\nfunction OldYoutubeForm() {\r\n\r\n    const formik = useFormik({\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n        // validate\r\n    })\r\n\r\n    console.log('Visited Field', formik.touched)\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div className='form-control'>\r\n                    <label htmlFor='name'>Name</label>\r\n                    <input type='text' id='name' name='name' onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.name}></input>\r\n                    {formik.touched.name && formik.errors.name ? <div className='error'>{formik.errors.name}</div> : null}\r\n                </div>\r\n                <div className='form-control'>\r\n                    <label htmlFor='name'>Email</label>\r\n                    <input type='email' id='email' name='email' onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur} value={formik.values.email}></input>\r\n                    {formik.touched.email && formik.errors.email ? <div className='error'>{formik.errors.email}</div> : null}\r\n                </div>\r\n                <div className='form-control'>\r\n                    <label htmlFor='name'>Channel</label>\r\n                    <input type='text' id='channel' name='channel' onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur} value={formik.values.channel}></input>\r\n                    {formik.touched.channel && formik.errors.channel ? <div className='error'>{formik.errors.channel}</div> : null}\r\n                </div>\r\n                <button type='Submit'>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OldYoutubeForm","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\YoutubeForm.js",["35"],"import React from \"react\";\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage,\r\n  FieldArray,\r\n  FastField,\r\n} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst initialValues = {\r\n  name: \"jhonnel\",\r\n  email: \"\",\r\n  channel: \"\",\r\n  comments: \"\",\r\n  address: \"\",\r\n  //Nested Object\r\n  social: {\r\n    facebook: \"\",\r\n    twitter: \"\",\r\n  },\r\n  phoneNumbers: [\"\", \"\"],\r\n  phNumbers: [\"\"],\r\n};\r\n\r\nconst onSubmit = (values,onSubmitProps) => {\r\n  console.log(\"Form data\", values);\r\n  console.log(\"onSubmitProps data\", onSubmitProps);\r\n  onSubmitProps.setSubmitting(false);\r\n};\r\n\r\nconst validateComments = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = \"Required Comments!\";\r\n  }\r\n  return error;\r\n};\r\n\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string().required(\"Required!\"),\r\n  email: Yup.string().email(\"Invalid email format\").required(\"Required!\"),\r\n  channel: Yup.string().required(\"Required!\"),\r\n});\r\n\r\nfunction YoutubeForm() {\r\n  //   console.log(\"Visited Field\", Formik.touched);\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmit}\r\n      //These 2 property will trigger once the submit button clicked for validation events field to required\r\n      //   validateOnChange={false}\r\n      //   validateOnBlur={false}\r\n      //   validateOnMount={false}\r\n    >\r\n      {(formik) => {\r\n        console.log(\"Formik props\", formik);\r\n        return (\r\n          <Form>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"name\">Name</label>\r\n              <Field type=\"text\" id=\"name\" name=\"name\" />\r\n              <ErrorMessage name=\"name\" component={TextError} />\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"name\">Email</label>\r\n              <Field type=\"email\" id=\"email\" name=\"email\" />\r\n              <ErrorMessage name=\"email\">\r\n                {(errorMsg) => <div className=\"error\">{errorMsg}</div>}\r\n              </ErrorMessage>\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"name\">Channel</label>\r\n              <Field type=\"text\" id=\"channel\" name=\"channel\" />\r\n              <ErrorMessage name=\"channel\" component={TextError} />\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"comments\">Comments</label>\r\n              <Field\r\n                as=\"textarea\"\r\n                type=\"text\"\r\n                id=\"comments\"\r\n                name=\"comments\"\r\n                validate={validateComments}\r\n              />\r\n              <ErrorMessage name=\"comments\" component={TextError} />\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"address\">Address</label>\r\n              <FastField name=\"address\">\r\n                {(props) => {\r\n                  console.log(\"Field Render\", props);\r\n                  const { field, form, meta } = props;\r\n                  return (\r\n                    <div>\r\n                      <input type=\"text\" id=\"address\" {...field} />\r\n                      {meta.touched && meta.error ? (\r\n                        <div>{meta.error}</div>\r\n                      ) : null}\r\n                    </div>\r\n                  );\r\n                }}\r\n              </FastField>\r\n              <ErrorMessage name=\"address\" />\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"facebook\">Facebook Comments</label>\r\n              <Field\r\n                as=\"input\"\r\n                type=\"text\"\r\n                id=\"facebook\"\r\n                name=\"social.facebook\"\r\n              />\r\n              <ErrorMessage name=\"facebook\" />\r\n            </div>\r\n\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"twitter\">Twitter Comments</label>\r\n              <Field\r\n                as=\"input\"\r\n                type=\"text\"\r\n                id=\"twitter\"\r\n                name=\"social.twitter\"\r\n              />\r\n              <ErrorMessage name=\"twitter\" />\r\n            </div>\r\n\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"primaryPh\">Primary Phone numbers</label>\r\n              <Field\r\n                as=\"input\"\r\n                type=\"text\"\r\n                id=\"primaryPh\"\r\n                name=\"phoneNumbers[0]\"\r\n              />\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"secondaryPh\">Secondary Phone numbers</label>\r\n              <Field\r\n                as=\"input\"\r\n                type=\"text\"\r\n                id=\"secondaryPh\"\r\n                name=\"phoneNumbers[1]\"\r\n              />\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"primaryPh\">List of phone numbers</label>\r\n              <FieldArray name=\"phNumbers\">\r\n                {(fieldArrayprops) => {\r\n                  //   console.log(\"fieldArrayprops\", fieldArrayprops);\r\n                  const { push, remove, form } = fieldArrayprops;\r\n                  const { values } = form;\r\n                  const { phNumbers } = values;\r\n                  console.log(\"Form Errors\", form.errors);\r\n                  return (\r\n                    <div>\r\n                      {phNumbers.map((phNumbers, index) => (\r\n                        <div key={index}>\r\n                          <Field name={`phNumbers[${index}`}></Field>\r\n                          {index > 0 && (\r\n                            <button type=\"Submit\" onClick={() => remove(index)}>\r\n                              -\r\n                            </button>\r\n                          )}\r\n                          <button type=\"Submit\" onClick={() => push(\"\")}>\r\n                            +\r\n                          </button>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  );\r\n                }}\r\n              </FieldArray>\r\n            </div>\r\n\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => formik.validateField(\"comments\")}\r\n            >\r\n              Validate comments\r\n            </button>\r\n            <button type=\"button\" onClick={() => formik.validateForm()}>\r\n              Validate all\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => formik.setFieldTouched(\"comments\")}\r\n            >\r\n              Visit comments\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() =>\r\n                formik.setTouched({\r\n                  name: true,\r\n                  email: true,\r\n                  channel: true,\r\n                  comments: true,\r\n                })\r\n              }\r\n            >\r\n              Visit fields\r\n            </button>\r\n            <button type=\"Submit\" disabled={!formik.isValid || formik.isSubmitting}>\r\n              Submit\r\n            </button>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default YoutubeForm;\r\n","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\TextError.js",[],["36","37"],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":3,"column":8,"nodeType":"44","messageId":"45","endLine":3,"endColumn":22},{"ruleId":"42","severity":1,"message":"46","line":23,"column":7,"nodeType":"44","messageId":"45","endLine":23,"endColumn":15},{"ruleId":"42","severity":1,"message":"47","line":97,"column":34,"nodeType":"44","messageId":"45","endLine":97,"endColumn":38},{"ruleId":"38","replacedBy":"48"},{"ruleId":"40","replacedBy":"49"},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'OldYoutubeForm' is defined but never used.","Identifier","unusedVar","'validate' is assigned a value but never used.","'form' is assigned a value but never used.",["50"],["51"],"no-global-assign","no-unsafe-negation"]