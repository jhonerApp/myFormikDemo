[{"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\index.js":"1","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\App.js":"2","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\reportWebVitals.js":"3","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\OldYoutubeForm.js":"4","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\YoutubeForm.js":"5","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\TextError.js":"6","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\formikContainer.js":"7","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\FormikContainer.js":"8","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\FormikControl.js":"9","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\Input.js":"10","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\Textarea.js":"11","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\Select.js":"12","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\CheckboxGroup.js":"13","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\RadioButton.js":"14","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\DatePicker.js":"15","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\LoginForm.js":"16"},{"size":517,"mtime":1607717210397,"results":"17","hashOfConfig":"18"},{"size":433,"mtime":1608067388940,"results":"19","hashOfConfig":"18"},{"size":375,"mtime":1607717210400,"results":"20","hashOfConfig":"18"},{"size":2718,"mtime":1607730229317,"results":"21","hashOfConfig":"18"},{"size":7837,"mtime":1607805875075,"results":"22","hashOfConfig":"18"},{"size":191,"mtime":1607717210396,"results":"23","hashOfConfig":"18"},{"size":659,"mtime":1607803718894,"results":"24","hashOfConfig":"18"},{"size":3000,"mtime":1608064853949,"results":"25","hashOfConfig":"18"},{"size":773,"mtime":1608064609480,"results":"26","hashOfConfig":"18"},{"size":429,"mtime":1607804971161,"results":"27","hashOfConfig":"18"},{"size":449,"mtime":1608036262686,"results":"28","hashOfConfig":"18"},{"size":835,"mtime":1608036262686,"results":"29","hashOfConfig":"18"},{"size":1172,"mtime":1608036275697,"results":"30","hashOfConfig":"18"},{"size":1097,"mtime":1608036262685,"results":"31","hashOfConfig":"18"},{"size":939,"mtime":1608066205819,"results":"32","hashOfConfig":"18"},{"size":1193,"mtime":1608067433447,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1q9vgcy",{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\index.js",[],["69","70"],"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\App.js",["71","72","73"],"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\reportWebVitals.js",[],"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\OldYoutubeForm.js",["74"],"import React from 'react'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\n\r\nconst initialValues = {\r\n    name: '',\r\n    email: '',\r\n    channel: ''\r\n}\r\n\r\nconst onSubmit = values => {\r\n    console.log('Form data', values)\r\n}\r\n\r\nconst validationSchema = Yup.object({\r\n    name: Yup.string().required('Required!'),\r\n    email: Yup.string()\r\n        .email('Invalid email format')\r\n        .required('Required!'),\r\n    channel: Yup.string().required('Required!')\r\n})\r\nconst validate = values => {\r\n    // let errors = {}\r\n    // if (!values.name) {\r\n    //     errors.name = 'Required'\r\n    // }\r\n    // if (!values.email) {\r\n    //     errors.email = 'Required'\r\n    // } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    //     errors.email = 'Invalid email format'\r\n    // }\r\n\r\n    // if (!values.channel) {\r\n    //     errors.channel = 'Required'\r\n    // }\r\n\r\n\r\n    // return errors\r\n\r\n}\r\nfunction OldYoutubeForm() {\r\n\r\n    const formik = useFormik({\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n        // validate\r\n    })\r\n\r\n    console.log('Visited Field', formik.touched)\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div className='form-control'>\r\n                    <label htmlFor='name'>Name</label>\r\n                    <input type='text' id='name' name='name' onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.name}></input>\r\n                    {formik.touched.name && formik.errors.name ? <div className='error'>{formik.errors.name}</div> : null}\r\n                </div>\r\n                <div className='form-control'>\r\n                    <label htmlFor='name'>Email</label>\r\n                    <input type='email' id='email' name='email' onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur} value={formik.values.email}></input>\r\n                    {formik.touched.email && formik.errors.email ? <div className='error'>{formik.errors.email}</div> : null}\r\n                </div>\r\n                <div className='form-control'>\r\n                    <label htmlFor='name'>Channel</label>\r\n                    <input type='text' id='channel' name='channel' onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur} value={formik.values.channel}></input>\r\n                    {formik.touched.channel && formik.errors.channel ? <div className='error'>{formik.errors.channel}</div> : null}\r\n                </div>\r\n                <button type='Submit'>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OldYoutubeForm","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\YoutubeForm.js",["75"],"import React, { useState } from \"react\";\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage,\r\n  FieldArray,\r\n  FastField,\r\n} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst initialValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  channel: \"\",\r\n  comments: \"\",\r\n  address: \"\",\r\n  //Nested Object\r\n  social: {\r\n    facebook: \"\",\r\n    twitter: \"\",\r\n  },\r\n  phoneNumbers: [\"\", \"\"],\r\n  phNumbers: [\"\"],\r\n};\r\n\r\nconst savedValuesValues = {\r\n  name: \"jhonnel\",\r\n  email: \"jhonerApp@gmail.com\",\r\n  channel: \"Sample Testing\",\r\n  comments: \"Formik Testing\",\r\n  address: \"3J PH MAKATI\",\r\n  //Nested Object\r\n  social: {\r\n    facebook: \"\",\r\n    twitter: \"\",\r\n  },\r\n  phoneNumbers: [\"\", \"\"],\r\n  phNumbers: [\"\"],\r\n};\r\n\r\nconst onSubmit = (values, onSubmitProps) => {\r\n  console.log(\"Form data\", values);\r\n  console.log(\"onSubmitProps data\", onSubmitProps);\r\n  onSubmitProps.setSubmitting(false);\r\n\r\n  //Reset forms\r\n  onSubmitProps.resetForm();\r\n};\r\n\r\nconst validateComments = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = \"Required Comments!\";\r\n  }\r\n  return error;\r\n};\r\n\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string().required(\"Required!\"),\r\n  email: Yup.string().email(\"Invalid email format\").required(\"Required!\"),\r\n  channel: Yup.string().required(\"Required!\"),\r\n});\r\n\r\nfunction YoutubeForm() {\r\n  const [formValues, setFormValues] = useState(null);\r\n  //   console.log(\"Visited Field\", Formik.touched);\r\n  return (\r\n    <Formik\r\n      initialValues={formValues || initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmit}\r\n      //These 2 property will trigger once the submit button clicked for validation events field to required\r\n      //   validateOnChange={false}\r\n      //   validateOnBlur={false}\r\n      //   validateOnMount={false}\r\n      enableReinitialize\r\n    >\r\n      {(formik) => {\r\n        console.log(\"Formik props\", formik);\r\n        return (\r\n          <Form>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"name\">Name</label>\r\n              <Field type=\"text\" id=\"name\" name=\"name\" />\r\n              <ErrorMessage name=\"name\" component={TextError} />\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"name\">Email</label>\r\n              <Field type=\"email\" id=\"email\" name=\"email\" />\r\n              <ErrorMessage name=\"email\">\r\n                {(errorMsg) => <div className=\"error\">{errorMsg}</div>}\r\n              </ErrorMessage>\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"name\">Channel</label>\r\n              <Field type=\"text\" id=\"channel\" name=\"channel\" />\r\n              <ErrorMessage name=\"channel\" component={TextError} />\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"comments\">Comments</label>\r\n              <Field\r\n                as=\"textarea\"\r\n                type=\"text\"\r\n                id=\"comments\"\r\n                name=\"comments\"\r\n                validate={validateComments}\r\n              />\r\n              <ErrorMessage name=\"comments\" component={TextError} />\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"address\">Address</label>\r\n              <FastField name=\"address\">\r\n                {(props) => {\r\n                  console.log(\"Field Render\", props);\r\n                  const { field, form, meta } = props;\r\n                  return (\r\n                    <div>\r\n                      <input type=\"text\" id=\"address\" {...field} />\r\n                      {meta.touched && meta.error ? (\r\n                        <div>{meta.error}</div>\r\n                      ) : null}\r\n                    </div>\r\n                  );\r\n                }}\r\n              </FastField>\r\n              <ErrorMessage name=\"address\" />\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"facebook\">Facebook Comments</label>\r\n              <Field\r\n                as=\"input\"\r\n                type=\"text\"\r\n                id=\"facebook\"\r\n                name=\"social.facebook\"\r\n              />\r\n              <ErrorMessage name=\"facebook\" />\r\n            </div>\r\n\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"twitter\">Twitter Comments</label>\r\n              <Field\r\n                as=\"input\"\r\n                type=\"text\"\r\n                id=\"twitter\"\r\n                name=\"social.twitter\"\r\n              />\r\n              <ErrorMessage name=\"twitter\" />\r\n            </div>\r\n\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"primaryPh\">Primary Phone numbers</label>\r\n              <Field\r\n                as=\"input\"\r\n                type=\"text\"\r\n                id=\"primaryPh\"\r\n                name=\"phoneNumbers[0]\"\r\n              />\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"secondaryPh\">Secondary Phone numbers</label>\r\n              <Field\r\n                as=\"input\"\r\n                type=\"text\"\r\n                id=\"secondaryPh\"\r\n                name=\"phoneNumbers[1]\"\r\n              />\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"primaryPh\">List of phone numbers</label>\r\n              <FieldArray name=\"phNumbers\">\r\n                {(fieldArrayprops) => {\r\n                  //   console.log(\"fieldArrayprops\", fieldArrayprops);\r\n                  const { push, remove, form } = fieldArrayprops;\r\n                  const { values } = form;\r\n                  const { phNumbers } = values;\r\n                  console.log(\"Form Errors\", form.errors);\r\n                  return (\r\n                    <div>\r\n                      {phNumbers.map((phNumbers, index) => (\r\n                        <div key={index}>\r\n                          <Field name={`phNumbers[${index}`}></Field>\r\n                          {index > 0 && (\r\n                            <button type=\"Submit\" onClick={() => remove(index)}>\r\n                              -\r\n                            </button>\r\n                          )}\r\n                          <button type=\"Submit\" onClick={() => push(\"\")}>\r\n                            +\r\n                          </button>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  );\r\n                }}\r\n              </FieldArray>\r\n            </div>\r\n            {/* \r\n            <button\r\n              type=\"button\"\r\n              onClick={() => formik.validateField(\"comments\")}\r\n            >\r\n              Validate comments\r\n            </button>\r\n            <button type=\"button\" onClick={() => formik.validateForm()}>\r\n              Validate all\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => formik.setFieldTouched(\"comments\")}\r\n            >\r\n              Visit comments\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() =>\r\n                formik.setTouched({\r\n                  name: true,\r\n                  email: true,\r\n                  channel: true,\r\n                  comments: true,\r\n                })\r\n              }\r\n            >\r\n              Visit fields\r\n            </button> */}\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => setFormValues(savedValuesValues)}\r\n            >\r\n              Load saved data\r\n            </button>\r\n            <button type=\"reset\">Reset</button>\r\n            <button\r\n              type=\"Submit\"\r\n              disabled={!formik.isValid || formik.isSubmitting}\r\n            >\r\n              Submit\r\n            </button>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default YoutubeForm;\r\n","E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\TextError.js",[],"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\formikContainer.js",[],"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\FormikContainer.js",[],"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\FormikControl.js",[],"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\Input.js",[],"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\Textarea.js",[],"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\Select.js",[],"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\CheckboxGroup.js",[],"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\RadioButton.js",["76"],"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\DatePicker.js",[],"E:\\ProjectRepo\\ReactJs\\myFormikDemo\\src\\components\\LoginForm.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":2,"column":8,"nodeType":"83","messageId":"84","endLine":2,"endColumn":23},{"ruleId":"81","severity":1,"message":"85","line":4,"column":8,"nodeType":"83","messageId":"84","endLine":4,"endColumn":22},{"ruleId":"81","severity":1,"message":"86","line":5,"column":8,"nodeType":"83","messageId":"84","endLine":5,"endColumn":19},{"ruleId":"81","severity":1,"message":"87","line":23,"column":7,"nodeType":"83","messageId":"84","endLine":23,"endColumn":15},{"ruleId":"81","severity":1,"message":"88","line":117,"column":34,"nodeType":"83","messageId":"84","endLine":117,"endColumn":38},{"ruleId":"89","severity":1,"message":"90","line":17,"column":140,"nodeType":"91","messageId":"92","endLine":17,"endColumn":142},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'FormikContainer' is defined but never used.","Identifier","unusedVar","'OldYoutubeForm' is defined but never used.","'YoutubeForm' is defined but never used.","'validate' is assigned a value but never used.","'form' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]